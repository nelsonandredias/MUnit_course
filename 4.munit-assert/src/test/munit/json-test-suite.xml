<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="4.munit-assert-test-suite.xml" />
	<munit:test name="payloadJSONExpectedSuccessTestCase" doc:id="189730b9-41a7-47f9-9ad9-8ecdb58e1fa8" description="Test">
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="4c0b5391-ddba-443d-9ff8-67682411aff5" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - Payload is Expected" doc:id="f777535c-bb1b-49f8-9848-7dda125b5f6e" expression="#[%dw 2.0


output application/json
---
payload]" is="#[MunitTools::equalTo(readUrl('classpath://payloadResponse.json','application/json'))]" message='#["The response payload is incorrect"]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="categoryMatchSuccessTestCase" doc:id="d7ba7f6b-e0ad-4182-ad79-8c76d3b3d64a" >
		<munit:behavior >
			<set-variable value="#[['obstetric', 'breast pain', 'dermatology', 'gynaecology'] as Array]" doc:name="Set Variable - medical Categories" doc:id="98da4541-259c-4022-a97a-31958243f230" variableName="medicalCategories"/>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="63273b22-c46e-416a-a679-edf6b9f383b3" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression - medical category exists" doc:id="448f8629-d79b-4f53-92fa-e1dbe7ac54f2" message='#["The medical category in the payload does not exist"]'>
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload.category must beOneOf(vars.medicalCategories)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="feeValueSuccessTestCase" doc:id="acdd7d1d-7e95-4159-9419-c5ff8d8c4be2" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="3ddb5e13-fc00-4886-bfdb-70ce1612135e" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - fee exists and is greater than or equal to 100" doc:id="5959a5c1-e843-4fc1-956c-c13fab8e39fd" expression="#[payload.fee]" is="#[MunitTools::both(MunitTools::notNullValue(), MunitTools::greaterThanOrEqualTo(100))]" message='#["The medical fee is not valid"]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="payloadMediaTypeSuccessTestCase" doc:id="42ccd004-03c8-449c-87f2-0d2e5f965bbb" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="caf9b095-4cf9-4649-a02c-589f3817634d" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - payload media type is JSON" doc:id="515f08d4-cdf3-4a9d-b348-b672b1a52e91" expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]" message='#["The media type of the response payload is incorrect"]'/>
		</munit:validation>
	</munit:test>


</mule>
